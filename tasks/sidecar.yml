---

# This part is essentially to retrieve the token if not provided already

- name: Try to obtain the API token
  block:
    - name: Get the API token from Graylog
      uri:
        url: "{{ graylog_http_publish_uri }}api/users/graylog-sidecar/tokens"
        user: "{{ graylog_root_username }}"
        password: "{{ graylog_root_password }}"
        method: GET
      register: graylogtokens
    - name: Get the first token
      set_fact:
        server_api_token: "{{ graylogtokens.json  | json_query('tokens[0].token')  }}"
      when: graylogtokens is defined and graylogtokens.json is defined
    # Make sure you install jmespath on your host (the orchestrator) first: pip install jmespath
    # So filters will work
    - name: Create the token if it does not exist
      block:
        - name: Create a new token
          uri:
            url: "{{ graylog_http_publish_uri }}api/users/graylog-sidecar/tokens/sidecarstoken"
            user: "{{ graylog_root_username }}"
            password: "{{ graylog_root_password }}"
            method: POST
            body_format: json
            body: ""
            headers:
              X-Requested-By: "cli"
          register: returnedtoken
        - name: Set the token value
          set_fact:
            server_api_token: "{{ returnedtoken.json  | json_query('token')  }}"
          when: returnedtoken is defined and returnedtoken.json is defined
      when: server_api_token is not defined or server_api_token == ""
    - name: Finally set the server_api_token to the right value
      set_fact:
        graylog_sidecar: "{{ graylog_sidecar | combine ( { 'server_api_token':  server_api_token } ) }}"
  when: graylog_sidecar.server_api_token is not defined or graylog_sidecar.server_api_token == ""

- name: "Sidecar: Run OS specific Setups"
  include_tasks: "setup-packages-{{ ansible_os_family }}.yml"
  vars:
    graylog_generic_apt_deb_url: "{{ graylog_sidecar_apt_deb_url }}"
    graylog_generic_yum_rpm_url: "{{ graylog_sidecar_yum_rpm_url }}"

- name: "Sidecar: Graylog server package should be installed"
  package:
    name: "graylog-sidecar{% if graylog_sidecar_version is defined %}={{ graylog_sidecar_version }}{% endif %}"
    state: present

- name: "Sidecar: Configure"
  template:
    src: "sidecar.yml.j2"
    dest: "{{ graylog_sidecar_config_file }}"
    owner: root
    group: root
    mode: 0644

- name: "Sidecar: Activate collector"
  command: "graylog-sidecar -service install -c \"{{ graylog_sidecar_config_file }}\""
  become: true
  ignore_errors: true
  changed_when: false

- name: "Sidecar: Restart collector"
  service:
    name: "{{ graylog_sidecar_service }}"
    state: restarted
    enabled: true
  become: true

